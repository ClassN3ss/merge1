const Attendance = require("../models/Attendance");
const FaceScanLog = require("../models/FaceScanLog");
const CheckinSession = require("../models/CheckinSession");
const User = require("../models/User");

exports.checkIn = async (req, res) => {
  try {
    const { studentId, fullName, latitude, longitude, sessionId } = req.body;

    const cleanStudentId = String(studentId).trim();

    const missingFields = [];
    if (!cleanStudentId) missingFields.push("studentId");
    if (!fullName) missingFields.push("fullName");
    if (!latitude) missingFields.push("latitude");
    if (!longitude) missingFields.push("longitude");
    if (!sessionId) missingFields.push("sessionId");

    if (missingFields.length) {
      return res.status(400).json({
        message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö",
        missing: missingFields,
      });
    }

    const now = new Date();

    const session = await CheckinSession.findById(sessionId).populate({
      path: "classId",
      populate: { path: "teacherId", select: "fullName" },
    });

    if (!session) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö session ‡∏ô‡∏µ‡πâ" });
    }

    if (
      session.status !== "active" ||
      now < session.openAt ||
      now > session.closeAt
    ) {
      return res.status(403).json({ message: "‚õî ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const duplicate = await Attendance.findOne({
      studentId: cleanStudentId,
      sessionId,
    });
    if (duplicate) {
      return res.status(409).json({ message: "‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const status = now <= session.closeAt ? "Present" : "Late";

    await Attendance.create({
      studentId: cleanStudentId,
      fullName,
      classId: session.classId._id,
      courseCode: session.classId.courseCode,
      courseName: session.classId.courseName,
      section: session.classId.section,
      sessionId: session._id,
      status,
      location_data: { latitude, longitude },
      scan_time: now,
      withTeacherFace: session.withTeacherFace || false,
      teacherName: session.classId.teacherId?.fullName || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå",
    });

    const user = await User.findOne({ studentId: cleanStudentId });
    if (!user)
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });

    await FaceScanLog.create({
      userId: user._id,
      classId: session.classId._id,
      date: now.toISOString().slice(0, 10),
      time: now.toTimeString().slice(0, 8),
      location: { lat: latitude, lng: longitude },
      status: "success",
    });

    res.json({ message: "‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", status });
  } catch (err) {
    console.error("‚ùå ERROR:", err.message);
    res
      .status(500)
      .json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
  }
};

exports.getHistoryByStudent = async (req, res) => {
  try {
    const studentId = String(req.params.studentId).trim();

    const history = await Attendance.find({ studentId })
      .sort({ scan_time: -1 })
      .populate("classId", "courseCode courseName section");

    res.json({ history });
  } catch (err) {
    res
      .status(500)
      .json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ", error: err.message });
  }
};

exports.getAllFaceScanLogs = async (req, res) => {
  try {
    const logs = await FaceScanLog.find()
      .populate("userId", "fullName username")
      .populate("classId", "courseName courseCode");

    res.json(logs);
  } catch (err) {
    console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }
};

exports.getAttendanceByClass = async (req, res) => {
  try {
    const { classId } = req.params;

    const records = await Attendance.find({ classId });

    const summary = {};

    for (const rec of records) {
      const sid = String(rec.studentId).trim();
      if (!summary[sid]) {
        summary[sid] = {
          studentId: sid,
          fullName: rec.fullName,
          present: 0,
          late: 0,
          absent: 0,
        };
      }

      if (rec.status === "Present") summary[sid].present++;
      else if (rec.status === "Late") summary[sid].late++;
      else if (rec.status === "Absent") summary[sid].absent++;
    }

    console.log("üìå Attendance summary:", summary);

    res.json(summary); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Object.values(...) ‡πÄ‡∏õ‡πá‡∏ô object
  } catch (err) {
    console.error("‚ùå ERROR in getAttendanceByClass:", err);
    res.status(500).json({
      message: "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      error: err.message,
    });
  }
};

